#set up cmake to download the external projects
include(FetchContent)
cmake_policy(SET CMP0054 NEW)
cmake_minimum_required (VERSION 3.18)

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
	message("Building In Debug Mode")
	set(RELEASE false)
	set(DEBUG_FLAG "-g")
else()
	set(DEBUG_FLAG "-O3")
	set(RELEASE true)
endif()

project (web-ifc LANGUAGES CXX)
enable_testing ()

set (CMAKE_CXX_STANDARD 17)
set (CMAKE_CXX_STANDARD_REQUIRED ON)
set (CMAKE_CXX_EXTENSIONS OFF)
set_property (GLOBAL PROPERTY USE_FOLDERS ON)

#collect source files
file (GLOB WebIfcParsing parsing/*.cpp)
file (GLOB_RECURSE WebIfcGeometry geometry/*.cpp)
file (GLOB WebIfcSchema schema/*.cpp)
file (GLOB WebIfcAPI web-ifc-api.cpp)
file (GLOB WebIfcUtility utility/*.cpp)
file (GLOB WebIfcTestSourceFiles test/*.cpp)
file (GLOB WebIfcTestingMain web-ifc-test.cpp)

#download the external projects and save their paths
Message("Downloading TinyNURBS")
FetchContent_Declare(tinynurbs GIT_REPOSITORY "https://github.com/pradeep-pyro/tinynurbs" GIT_TAG "2fc6562d71665312c6298f7c340bace1bcf1b7a1" SOURCE_SUBDIR "../")
FetchContent_MakeAvailable(tinynurbs)
FetchContent_GetProperties(tinynurbs)

Message("Downloading TinyCPPTest")
FetchContent_Declare(tinycpptest GIT_REPOSITORY "https://github.com/kovacsv/TinyCppTest" GIT_TAG "12e42c8ac6e032ce450fb3f772ebdfd1ddc6008c" SOURCE_SUBDIR "../")
FetchContent_MakeAvailable(tinycpptest)
FetchContent_GetProperties(tinycpptest)

Message("Downloading GLM")
FetchContent_Declare(glm GIT_REPOSITORY "https://github.com/g-truc/glm" GIT_TAG "bf71a834948186f4097caa076cd2663c69a10e1e" SOURCE_SUBDIR "../")
FetchContent_MakeAvailable(glm)
FetchContent_GetProperties(glm)

Message("Downloading Earcut")
FetchContent_Declare(earcut GIT_REPOSITORY "https://github.com/mapbox/earcut.hpp" GIT_TAG "4811a2b69b91f6127a75e780de6e2113609ddabb" SOURCE_SUBDIR "../")
FetchContent_MakeAvailable(earcut)
FetchContent_GetProperties(earcut)

Message("Downloading CDT")
FetchContent_Declare(cdt GIT_REPOSITORY "https://github.com/artem-ogre/CDT" GIT_TAG "4d0c9026b8ec846fe544897e7111f8f9080d5f8a" SOURCE_SUBDIR "../")
FetchContent_MakeAvailable(cdt)
FetchContent_GetProperties(cdt)

Message("Downloading FUZZY")
FetchContent_Declare(fuzzy GIT_REPOSITORY "https://github.com/tomvandig/fuzzy-bools" GIT_TAG "a52c0f0c0667b7c875ae44e91e63a33c1813be64" SOURCE_SUBDIR "../")
FetchContent_MakeAvailable(fuzzy)
FetchContent_GetProperties(fuzzy)
file(RENAME ${fuzzy_SOURCE_DIR}/src ${fuzzy_SOURCE_DIR}/fuzzy RESULT $res)

Message("Downloads Finished")

if (EMSCRIPTEN)
	#build parameters for web-ifc
	add_executable (web-ifc ${WebIfcSchema} ${WebIfcParsing} ${WebIfcAPI} ${WebIfcUtility} ${WebIfcGeometry})
	target_include_directories(web-ifc PUBLIC ${tinynurbs_SOURCE_DIR}/include)
	target_include_directories(web-ifc PUBLIC ${glm_SOURCE_DIR}/)
	target_include_directories(web-ifc PUBLIC ${glm_SOURCE_DIR}/glm)
	target_include_directories(web-ifc PUBLIC ${earcut_SOURCE_DIR}/include)
	target_include_directories(web-ifc PUBLIC ${cdt_SOURCE_DIR}/CDT/include)
	target_include_directories(web-ifc PUBLIC ${fuzzy_SOURCE_DIR}/)
	target_compile_options(web-ifc PUBLIC "-Wall")
	target_compile_options(web-ifc PUBLIC "-Wextra")
	target_compile_options(web-ifc PUBLIC "-Wpedantic")
	target_compile_options(web-ifc PUBLIC "-pedantic")
	if (RELEASE)
		target_compile_options(web-ifc PUBLIC "-O3")
	endif()
	set_target_properties(web-ifc PROPERTIES LINK_FLAGS "${DEBUG_FLAG} --bind -flto --define-macro=REAL_T_IS_DOUBLE -s ALLOW_MEMORY_GROWTH=1 -s MAXIMUM_MEMORY=4GB -sSTACK_SIZE=5MB -s EXPORT_NAME=WebIFCWasm -s MODULARIZE=1 -s ENVIRONMENT=web")

	add_executable (web-ifc-node ${WebIfcSchema} ${WebIfcParsing} ${WebIfcAPI} ${WebIfcUtility} ${WebIfcGeometry})
	target_include_directories(web-ifc-node PUBLIC ${tinynurbs_SOURCE_DIR}/include)
	target_include_directories(web-ifc-node PUBLIC ${glm_SOURCE_DIR}/)
	target_include_directories(web-ifc-node PUBLIC ${glm_SOURCE_DIR}/glm)
	target_include_directories(web-ifc-node PUBLIC ${earcut_SOURCE_DIR}/include)
	target_include_directories(web-ifc-node PUBLIC ${cdt_SOURCE_DIR}/CDT/include)
	target_include_directories(web-ifc-node PUBLIC ${fuzzy_SOURCE_DIR}/)
	target_compile_options(web-ifc-node PUBLIC "-Wall")
	target_compile_options(web-ifc-node PUBLIC "-Wextra")
	target_compile_options(web-ifc-node PUBLIC "-Wpedantic")
	target_compile_options(web-ifc-node PUBLIC "-pedantic")
	if (RELEASE)
		target_compile_options(web-ifc-node PUBLIC "-O3")
	endif()
	set_target_properties(web-ifc-node PROPERTIES LINK_FLAGS "${DEBUG_FLAG} --bind -flto --define-macro=REAL_T_IS_DOUBLE -s ALLOW_MEMORY_GROWTH=1 -s MAXIMUM_MEMORY=4GB -sSTACK_SIZE=5MB -s EXPORT_NAME=WebIFCWasm -s MODULARIZE=1 ")


	#multi-treaded versions
	add_executable (web-ifc-mt ${WebIfcSchema} ${WebIfcParsing} ${WebIfcAPI} ${WebIfcUtility} ${WebIfcGeometry})
	target_include_directories(web-ifc-mt PUBLIC ${tinynurbs_SOURCE_DIR}/include)
	target_include_directories(web-ifc-mt PUBLIC ${glm_SOURCE_DIR}/)
	target_include_directories(web-ifc-mt PUBLIC ${glm_SOURCE_DIR}/glm)
	target_include_directories(web-ifc-mt PUBLIC ${earcut_SOURCE_DIR}/include)
	target_include_directories(web-ifc-mt PUBLIC ${cdt_SOURCE_DIR}/CDT/include)
	target_include_directories(web-ifc-mt PUBLIC ${fuzzy_SOURCE_DIR}/)
	target_compile_options(web-ifc-mt PUBLIC "-pthread")
	target_compile_options(web-ifc-mt PUBLIC "-Wall")
	target_compile_options(web-ifc-mt PUBLIC "-Wextra")
	target_compile_options(web-ifc-mt PUBLIC "-Wpedantic")
	target_compile_options(web-ifc-mt PUBLIC "-pedantic")
	if (RELEASE)
		target_compile_options(web-ifc-mt PUBLIC "-O3")
	endif()
	set_target_properties(web-ifc-mt PROPERTIES LINK_FLAGS "${DEBUG_FLAG} -pthread -s PTHREAD_POOL_SIZE=navigator.hardwareConcurrency --bind -flto --define-macro=REAL_T_IS_DOUBLE -sSTACK_SIZE=5MB -s ALLOW_MEMORY_GROWTH=1 -s MAXIMUM_MEMORY=4GB -s EXPORT_NAME=WebIFCWasm -s MODULARIZE=1 -s ENVIRONMENT=web,worker")
endif()


set (CUSTOM true)

if (NOT EMSCRIPTEN)
	if (CUSTOM)
		add_executable (web-ifc-custom web-ifc-custom.cpp ${WebIfcSchema} ${WebIfcParsing} ${WebIfcGeometry} ${WebIfcUtility} "./test/io_helpers.cpp")
		target_include_directories(web-ifc-custom PUBLIC ${tinynurbs_SOURCE_DIR}/include)
		target_include_directories(web-ifc-custom PUBLIC ${cdt_SOURCE_DIR}/CDT/include)
		target_include_directories(web-ifc-custom PUBLIC ${glm_SOURCE_DIR}/)
		target_include_directories(web-ifc-custom PUBLIC ${glm_SOURCE_DIR}/glm)
		target_include_directories(web-ifc-custom PUBLIC ${earcut_SOURCE_DIR}/include)
		target_include_directories(web-ifc-custom PUBLIC ${tinycpptest_SOURCE_DIR}/Sources)
		target_include_directories(web-ifc-custom PUBLIC ${fuzzy_SOURCE_DIR}/)
	else()
		#build parameters for web-ifc-test
		add_executable (web-ifc-test ${WebIfcSchema} ${WebIfcParsing} ${WebIfcUtility} ${WebIfcGeometry} ${WebIfcTestSourceFiles})
		target_include_directories(web-ifc-test PUBLIC ${tinynurbs_SOURCE_DIR}/include)
		target_include_directories(web-ifc-test PUBLIC ${cdt_SOURCE_DIR}/CDT/include)
		target_include_directories(web-ifc-test PUBLIC ${glm_SOURCE_DIR}/)
		target_include_directories(web-ifc-test PUBLIC ${glm_SOURCE_DIR}/glm)
		target_include_directories(web-ifc-test PUBLIC ${earcut_SOURCE_DIR}/include)
		target_include_directories(web-ifc-test PUBLIC ${tinycpptest_SOURCE_DIR}/Sources)
		target_include_directories(web-ifc-test PUBLIC ${fuzzy_SOURCE_DIR}/)
		target_compile_options(web-ifc-test PUBLIC "-Wall")
		target_compile_options(web-ifc-test PUBLIC "-Wextra")
		target_compile_options(web-ifc-test PUBLIC "-Wpedantic")
		target_compile_options(web-ifc-test PUBLIC "-pedantic")
		if (RELEASE)
			target_compile_options(web-ifc-test PUBLIC "-O3")
		endif()
		add_test (web-ifc-test web-ifc-test)
		set_tests_properties(web-ifc-test PROPERTIES LABELS "web-ifc")
		
		#build parameters for web-ifc in testing environment
		add_executable (web-ifc ${WebIfcSchema} ${WebIfcParsing} ${WebIfcUtility} ${WebIfcGeometry} ${WebIfcTestingMain} "./test/io_helpers.cpp")
		target_include_directories(web-ifc PUBLIC ${tinynurbs_SOURCE_DIR}/include)
		target_include_directories(web-ifc PUBLIC ${cdt_SOURCE_DIR}/CDT/include)
		target_include_directories(web-ifc PUBLIC ${glm_SOURCE_DIR}/)
		target_include_directories(web-ifc PUBLIC ${glm_SOURCE_DIR}/glm)
		target_include_directories(web-ifc PUBLIC ${earcut_SOURCE_DIR}/include)
		target_include_directories(web-ifc PUBLIC ${tinycpptest_SOURCE_DIR}/Sources)
		target_include_directories(web-ifc PUBLIC ${fuzzy_SOURCE_DIR}/)
		target_compile_options(web-ifc PUBLIC "-Wall")
		target_compile_options(web-ifc PUBLIC "-Wextra")
		target_compile_options(web-ifc PUBLIC "-Wpedantic")
		target_compile_options(web-ifc PUBLIC "-pedantic")
		#comment these to prevent debug files being generated
		target_compile_options(web-ifc PUBLIC "-DCSG_DEBUG_OUTPUT")
		target_compile_options(web-ifc PUBLIC "-DDEBUG_DUMP_SVG")
		if (RELEASE)
			target_compile_options(web-ifc PUBLIC "-O3")
			set_target_properties(web-ifc PROPERTIES LINK_FLAGS "-O3")
		endif()
	endif()
endif()
